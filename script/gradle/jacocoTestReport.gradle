apply plugin: 'jacoco'

jacoco {
  toolVersion = "0.7.7.201606060606"
}

// apply from: rootProject.file("script/gradle/jacocoTestReport.gradle")
def buildTypes = android.buildTypes.collect { type -> type.name }
def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
// A list of directories which should be included in coverage report
def coverageSourceDirs = ['src/main/java', "src/$productFlavors", "src/$buildTypes"]
// A list of files which should be excluded from coverage report since they are generated and/or framework code
def coverageExcludeFiles = ['**/R.class', '**/R$*.class', '**/DataBindingInfo.class', '**/databinding/*.*', '**/com/android/**/*.*', '**/BR.class']

task jacocoTestReportProduction(type: JacocoReport, dependsOn: ['testProductDebugUnitTest']) {
  group = "Reporting"
  description = "Generate Jacoco coverage reports after running tests."
  reports {
    xml.enabled true
    html.enabled true
    csv.enabled false
    xml.destination "${buildDir}/reports/jacoco/test/jacocoTestReportProd.xml"
    html.destination "${buildDir}/reports/coverage/prod"
    classDirectories = files(
        fileTree(
            dir: "${buildDir}/intermediates/classes/production/debug",
            exclude: coverageExcludeFiles))
  }
  sourceDirectories = files(coverageSourceDirs)
  executionData = files "${buildDir}/jacoco/testProductDebugUnitTest.exec"

  doLast {
    println "jacoco xml report has been generated to file://${buildDir}/reports/jacoco/test/jacocoTestReportProd.xml"
    println "jacoco html report has been generated to file://${reports.html.destination}/index.html"
  }
}

task jacocoTestReportDevelop(type: JacocoReport, dependsOn: ['testDevelopDebugUnitTest']) {
  group = "Reporting"
  description = "Generate Jacoco coverage reports after running tests."
  reports {
    xml.enabled true
    html.enabled true
    csv.enabled false
    xml.destination "${buildDir}/reports/jacoco/test/jacocoTestReportDevelop.xml"
    html.destination "${buildDir}/reports/coverage/develop"
    classDirectories = files(
        fileTree(
            dir: "${buildDir}/intermediates/classes/develop/debug",
            exclude: coverageExcludeFiles))
  }
  sourceDirectories = files(coverageSourceDirs)
  executionData = files "${buildDir}/jacoco/testDevelopDebugUnitTest.exec"

  doLast {
    println "jacoco xml report has been generated to file://${buildDir}/reports/jacoco/test/jacocoTestReportDevelop.xml"
    println "jacoco html report has been generated to file://${reports.html.destination}/index.html"
  }
}

task jacocoTestReportDomain(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
  group = "Reporting"
  description = "Generate Jacoco coverage reports after running tests."
  reports {
    xml.enabled true
    html.enabled true
    csv.enabled false
    xml.destination "${buildDir}/reports/jacoco/test/jacocoTestReportDomain.xml"
    html.destination "${buildDir}/reports/coverage/domain"
    classDirectories = files(
        fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            exclude: coverageExcludeFiles))
  }
  sourceDirectories = files(coverageSourceDirs)
  executionData = files "${buildDir}/jacoco/testDebugUnitTest.exec"

  doLast {
    println "jacoco xml report has been generated to file://${buildDir}/reports/jacoco/test/jacocoTestReportDomain.xml"
    println "jacoco html report has been generated to file://${reports.html.destination}/index.html"
  }
}